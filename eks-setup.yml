---
- name: Deploy a minimal, publicly accessible EKS cluster with a basic storage class
  hosts: localhost
  gather_facts: true
  become: false

  vars:
    # EKS cluster settings
    cluster_name: minimal-eks-cluster
    region: us-east-2
    node_type: t3.small
    node_count: 2

    # eksctl architecture mapping for different systems
    eksctl_architecture_map:
      "x86_64": "amd64"
      "aarch64": "arm64"
      "arm64": "arm64"
    eksctl_architecture: "{{ eksctl_architecture_map.get(ansible_architecture, 'amd64') }}"

    # Kubernetes storage class settings for gp3 volumes
    storage_class_name: standard
    storage_class_type: gp3  # Use gp3 for AWS EBS volume
    storage_class_fs_type: ext4
    storage_class_reclaim_policy: Retain
    storage_class_allow_volume_expansion: true
    storage_class_volume_binding_mode: WaitForFirstConsumer
    storage_class_iops: 3000  # Default IOPS for gp3 volumes (can be customized)
    storage_class_throughput: 125  # Default throughput in MiB/s (can be customized)

  tasks:
    - name: Install necessary packages
      package:
        name: "{{ item }}"
        state: present
      loop:
        - curl
        - unzip
        - awscli
        - jq

    - name: Check if eksctl is installed
      command: which eksctl
      register: eksctl_check
      ignore_errors: true

    - name: Install eksctl if not installed
      when: eksctl_check.rc != 0
      block:
        - name: Download eksctl
          get_url:
            url: "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_{{ ansible_system | lower }}_{{ eksctl_architecture }}.tar.gz"
            dest: /tmp/eksctl.tar.gz

        - name: Extract eksctl
          unarchive:
            src: /tmp/eksctl.tar.gz
            dest: /usr/local/bin/
            remote_src: yes
            mode: '0755'

        - name: Remove eksctl tarball after extraction
          file:
            path: /tmp/eksctl.tar.gz
            state: absent
          when: eksctl_check.rc != 0

    - name: Verify eksctl installation
      command: eksctl version
      register: eksctl_version
      changed_when: false

    - name: Output eksctl version
      debug:
        msg: "eksctl version: {{ eksctl_version.stdout }}"

    - name: Create minimal EKS cluster
      command: >
        eksctl create cluster
        --name {{ cluster_name }}
        --region {{ region }}
        --nodes {{ node_count }}
        --node-type {{ node_type }}
        --managed
        --alb-ingress-access
      register: eksctl_create_cluster
      changed_when: "'created' in eksctl_create_cluster.stdout"

    - name: Output EKS cluster creation details
      debug:
        msg: "EKS cluster creation result: {{ eksctl_create_cluster.stdout }}"

    - name: Write kubeconfig for EKS cluster
      command: eksctl utils write-kubeconfig --cluster={{ cluster_name }} --region={{ region }}
      register: write_kubeconfig
      changed_when: "'saved' in write_kubeconfig.stdout"

    - name: Create a dynamic default StorageClass YAML file for gp3
      copy:
        dest: /tmp/storage-class.yaml
        content: |
          apiVersion: storage.k8s.io/v1
          kind: StorageClass
          metadata:
            name: {{ storage_class_name }}
            annotations:
              storageclass.kubernetes.io/is-default-class: "true"
          provisioner: kubernetes.io/aws-ebs
          parameters:
            type: {{ storage_class_type }}
            fsType: {{ storage_class_fs_type }}
            iops: "{{ storage_class_iops }}"
            throughput: "{{ storage_class_throughput }}"
          reclaimPolicy: {{ storage_class_reclaim_policy }}
          allowVolumeExpansion: {{ storage_class_allow_volume_expansion }}
          volumeBindingMode: {{ storage_class_volume_binding_mode }}

    - name: Apply the StorageClass to the EKS cluster
      command: kubectl apply --validate=false -f /tmp/storage-class.yaml
      environment:
        KUBECONFIG: "{{ lookup('env', 'HOME') }}/.kube/config"
      register: apply_storage_class
      changed_when: "'created' in apply_storage_class.stdout"

    - name: Output StorageClass creation details
      debug:
        msg: "StorageClass creation result: {{ apply_storage_class.stdout }}"

    - name: Remove storage class YAML file after application
      file:
        path: /tmp/storage-class.yaml
        state: absent
